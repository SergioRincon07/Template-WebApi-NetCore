// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using WebApi.DataBaseMegaLinea.Models;

namespace WebApi.DataBaseMegaLinea.Context
{
    public partial class MegaLineaContext
    {
        private IMegaLineaContextProcedures _procedures;

        public virtual IMegaLineaContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new MegaLineaContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IMegaLineaContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SPConsultarUsuariosResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<spLoginResult>().HasNoKey().ToView(null);
        }
    }

    public partial class MegaLineaContextProcedures : IMegaLineaContextProcedures
    {
        private readonly MegaLineaContext _context;

        public MegaLineaContextProcedures(MegaLineaContext context)
        {
            _context = context;
        }

        public virtual async Task<List<SPConsultarUsuariosResult>> SPConsultarUsuariosAsync(string NtUser, int? IdArea, string Nombre, int? Activo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NtUser",
                    Size = 50,
                    Value = NtUser ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IdArea",
                    Value = IdArea ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Nombre",
                    Size = 100,
                    Value = Nombre ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Activo",
                    Value = Activo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SPConsultarUsuariosResult>("EXEC @returnValue = [dbo].[SPConsultarUsuarios] @NtUser, @IdArea, @Nombre, @Activo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<spLoginResult>> spLoginAsync(string IdProveedor, string Contrasenia, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "IdProveedor",
                    Size = 20,
                    Value = IdProveedor ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Contrasenia",
                    Size = 20,
                    Value = Contrasenia ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<spLoginResult>("EXEC @returnValue = [dbo].[spLogin] @IdProveedor, @Contrasenia", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
